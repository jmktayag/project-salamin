rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can access their own documents and subcollections
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // User profile access rules
      match /profile/data {
        // Users can always access their own profile
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Public profiles can be read by authenticated users
        allow read: if request.auth != null && 
          resource.data.profileVisibility == 'public';
        
        // Peers-only profiles can be read by authenticated users with profiles
        allow read: if request.auth != null && 
          resource.data.profileVisibility == 'peers_only' &&
          exists(/databases/$(database)/documents/users/$(request.auth.uid)/profile/data);
      }
      
      // User preferences - private to user only
      match /preferences/data {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User statistics - private to user only
      match /statistics/current {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User goals - private to user only
      match /goals/{goalId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User badges - read by user, write by system
      match /badges/{badgeId} {
        allow read: if request.auth != null && request.auth.uid == userId;
        // Write access would be controlled by server-side functions
      }
      
      // User challenge progress - private to user only
      match /challengeProgress/{challengeId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // User notifications - private to user only
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Interview sessions - existing rules maintained
    match /interviewSessions/{sessionId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Daily challenges - read-only for authenticated users
    match /dailyChallenges/{challengeId} {
      allow read: if request.auth != null;
      // Write access controlled by server-side functions
    }
    
    // Global badge definitions - read-only for authenticated users
    match /badges/{badgeId} {
      allow read: if request.auth != null;
      // Write access controlled by server-side functions
    }
    
    // Analytics aggregation collections (for future use)
    match /analytics/{document=**} {
      // Read/write access controlled by server-side functions only
      allow read, write: if false;
    }
    
    // Helper functions for validation
    function isValidUserProfile(data) {
      return data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt', 'updatedAt']) &&
        data.uid is string &&
        data.email is string &&
        data.displayName is string &&
        data.yearsOfExperience is number &&
        data.yearsOfExperience >= 0 &&
        data.yearsOfExperience <= 50 &&
        data.industry is list &&
        data.targetRoles is list &&
        data.targetCompanies is list &&
        data.preferredInterviewTypes is list &&
        data.difficultyPreference in ['beginner', 'intermediate', 'advanced', 'mixed'] &&
        data.sessionLengthPreference is number &&
        data.sessionLengthPreference >= 5 &&
        data.sessionLengthPreference <= 120 &&
        data.timeZone is string &&
        data.profileVisibility in ['public', 'peers_only', 'private'] &&
        data.dataProcessingConsent is bool &&
        data.marketingConsent is bool &&
        data.accountStatus in ['active', 'suspended', 'pending_verification'] &&
        data.subscriptionTier in ['free', 'premium', 'professional'];
    }
    
    function isValidUserPreferences(data) {
      return data.keys().hasAll(['userId', 'theme', 'language', 'updatedAt']) &&
        data.userId is string &&
        data.theme in ['light', 'dark', 'system'] &&
        data.language is string &&
        data.practiceReminders is bool;
    }
    
    function isValidUserStatistics(data) {
      return data.keys().hasAll(['userId', 'totalSessions', 'completedSessions']) &&
        data.userId is string &&
        data.totalSessions is number &&
        data.completedSessions is number &&
        data.totalPracticeTime is number &&
        data.averageScore is number &&
        data.currentStreak is number;
    }
    
    // Validation rules for profile updates
    match /users/{userId}/profile/data {
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserProfile(request.resource.data);
    }
    
    // Validation rules for preferences updates
    match /users/{userId}/preferences/data {
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserPreferences(request.resource.data);
    }
    
    // Validation rules for statistics updates
    match /users/{userId}/statistics/current {
      allow write: if request.auth != null && 
        request.auth.uid == userId &&
        isValidUserStatistics(request.resource.data);
    }
  }
}